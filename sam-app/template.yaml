AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  App Description

Globals:
  Function:
    Timeout: 60

Resources:
  # Cognito + Pre/Post Signup Triggers
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpFunction.Arn
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool

  # Cognito Triggers
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/cognito-pre-signup-trigger
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  PreSignUpFunctionResourceBasedPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/cognito-post-confirmation-trigger
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt PostConfirmationDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  PostConfirmationFunctionResourceBasedPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PostConfirmationFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PostConfirmationFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource: !GetAtt EventBus.Arn
      Roles:
        - !Ref PostConfirmationFunctionRole # This references the automatically generated IAM role for your Lambda function by SAM.

  # Cognito Authorizer
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: cognitoAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref MyApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # API Gateway
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET, POST, PUT, DELETE'"
        AllowHeaders: "'Content-Type, Authorization'"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        securityDefinitions:
          CognitoAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              type: "cognito_user_pools"
              providerARNs:
                - !GetAtt UserPool.Arn
        paths:
          /make-credit-card-payment:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MakeCreditCardFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - CognitoAuthorizer: []
          /get-account-credit-card:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAccountCreditCardFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - CognitoAuthorizer: []
          /edit-account-credit-card:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditAccountCreditCardFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - CognitoAuthorizer: []
            put:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditAccountCreditCardFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - CognitoAuthorizer: []
            delete:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditAccountCreditCardFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - CognitoAuthorizer: []
          # /get-account-payment-history
          # /delete-account
          /get-account-api-key:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAccountApiKeyFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - CognitoAuthorizer: []
          /reset-account-api-key:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetAccountApiKeyFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - CognitoAuthorizer: []

  # API Gateway Functions
  MakeCreditCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/make-credit-card-payment
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        GetApiEvent:
          Type: Api
          Properties:
            Path: /make-credit-card-payment
            Method: post
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  MakeCreditCardFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MakeCreditCardFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt CreditCardsTable.Arn
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource: !GetAtt EventBus.Arn
      Roles:
        - !Ref MakeCreditCardFunctionRole

  GetAccountCreditCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get-account-credit-card
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        GetApiEvent:
          Type: Api
          Properties:
            Path: /get-account-credit-card
            Method: get
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  GetAccountCreditCardFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetAccountCreditCardFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt CreditCardsTable.Arn
      Roles:
        - !Ref GetAccountCreditCardFunctionRole # This references the automatically generated IAM role for your Lambda function by SAM.

  EditAccountCreditCardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/edit-account-credit-card
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        PostApiEvent:
          Type: Api
          Properties:
            Path: /edit-account-credit-card
            Method: post
            RestApiId: !Ref MyApi
        PutApiEvent:
          Type: Api
          Properties:
            Path: /edit-account-credit-card
            Method: put
            RestApiId: !Ref MyApi
        DeleteApiEvent:
          Type: Api
          Properties:
            Path: /edit-account-credit-card
            Method: delete
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  EditAccountCreditCardFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EditAccountCreditCardFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
            Resource: !GetAtt CreditCardsTable.Arn
      Roles:
        - !Ref EditAccountCreditCardFunctionRole # This references the automatically generated IAM role for your Lambda function by SAM.

  # DeleteAccountFunction
  # GetAccountPaymentHistoryFunction

  GetAccountApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get-account-api-key
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        GetApiEvent:
          Type: Api
          Properties:
            Path: /get-account-api-key
            Method: get
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  GetAccountApiKeyFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetAccountApiKeyFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt ApiKeysTable.Arn
      Roles:
        - !Ref GetAccountApiKeyFunctionRole # This references the automatically generated IAM role for your Lambda function by SAM.

  ResetAccountApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/reset-account-api-key
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        PostApiEvent:
          Type: Api
          Properties:
            Path: /reset-account-api-key
            Method: post
            RestApiId: !Ref MyApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  ResetAccountApiKeyFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ResetAccountApiKeyFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:UpdateItem
            Resource: !GetAtt ApiKeysTable.Arn
      Roles:
        - !Ref ResetAccountApiKeyFunctionRole # This references the automatically generated IAM role for your Lambda function by SAM.

  # DynamoDBTables
  CreditCardsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CreditCards
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: nextPayment
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: NextPaymentIndex
          KeySchema:
            - AttributeName: nextPayment
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Payments
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH # Partition key
        - AttributeName: date
          KeyType: RANGE # Sort key
      BillingMode: PAY_PER_REQUEST
  ApiKeysTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ApiKeys
      PrimaryKey:
        Name: user_id
        Type: String

  # DynamoDB Stream

  # EventBridge
  EventBus:
    Type: "AWS::Events::EventBus"
    Properties:
      Name: TieredApiAccessManagerEventBus

  # EventBridge Rules
  AccountCreatedRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - "account.created"
      Targets:
        - Id: "TargetSQS"
          Arn: !GetAtt EditAccountApiKeyQueue.Arn
  PaymentSuccessRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - "payment.success"
      Targets:
        - Id: "TargetSQS"
          Arn: !GetAtt EditAccountApiKeyQueue.Arn
  PaymentFailureRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - "payment.failure"
      Targets:
        - Id: "TargetSQS"
          Arn: !GetAtt EditAccountApiKeyQueue.Arn

  # SQS Queues
  EditAccountApiKeyQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EditAccountApiKeyQueue
      VisibilityTimeout: 70
  EditAccountApiKeyQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref EditAccountApiKeyQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sqs:SendMessage"
            Resource: !GetAtt EditAccountApiKeyQueue.Arn

  UpdatePaymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: UpdatePaymentQueue
      VisibilityTimeout: 70
  UpdatePaymentQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref UpdatePaymentQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sqs:SendMessage"
            Resource: !GetAtt UpdatePaymentQueue.Arn

  # Dead Letter SQS Queues
  PostConfirmationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: PostConfirmationDLQ
  EditAccountApiKeyDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EditAccountApiKeyDLQ
  UpdatePaymentDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: UpdatePaymentDLQ

  # Asynchronous Functions
  EditAccountAPIKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      CodeUri: lambda/edit-account-api-key
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EditAccountApiKeyQueue.Arn
            BatchSize: 10
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt EditAccountApiKeyDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  EditAccountAPIKeyFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EditAccountAPIKeyFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateIt
            Resource: !GetAtt ApiKeysTable.Arn
      Roles:
        - !Ref EditAccountAPIKeyFunctionRole # This references the automatically generated IAM role for your Lambda function by SAM.

  UpdatePaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      CodeUri: lambda/update-payment
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt UpdatePaymentQueue.Arn
            BatchSize: 10
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt UpdatePaymentDLQ.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  UpdatePaymentFunctionPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UpdatePaymentFunctionPermissionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !GetAtt CreditCardsTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*" # SES doesn't support resource-level permissions, so you must use "*"
            Resource: !GetAtt PaymentsTable.Arn
      Roles:
        - !Ref UpdatePaymentFunctionRole # This references the automatically generated IAM role for your Lambda function by SAM.

Outputs:
  UserPoolId:
    Description: "The ID of the Cognito User Pool"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "The ID of the Cognito App Client"
    Value: !Ref UserPoolClient
  ApiGatewayEndpoint:
    Description: "The URL endpoint for the API Gateway"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
